# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class BooleanRuleObject(msrest.serialization.Model):
    """The boolean rule. The color is selected based on the logic value of the key.

    :param true: The color when value is true. Color is a JSON string in a variety of permitted
     formats, HTML-style hex values, RGB ("#ff0", "#ffff00", "rgb(255, 255, 0)"), RGBA ("rgba(255,
     255, 0, 1)"), HSL("hsl(100, 50%, 50%)"), and HSLA("hsla(100, 50%, 50%, 1)"). Predefined HTML
     colors names, like yellow and blue, are also permitted.
    :type true: str
    :param false: The color when value is false. Color is a JSON string in a variety of permitted
     formats, HTML-style hex values, RGB ("#ff0", "#ffff00", "rgb(255, 255, 0)"), RGBA ("rgba(255,
     255, 0, 1)"), HSL("hsl(100, 50%, 50%)"), and HSLA("hsla(100, 50%, 50%, 1)"). Predefined HTML
     colors names, like yellow and blue, are also permitted.
    :type false: str
    """

    _attribute_map = {
        'true': {'key': 'true', 'type': 'str'},
        'false': {'key': 'false', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BooleanRuleObject, self).__init__(**kwargs)
        self.true = kwargs.get('true', None)
        self.false = kwargs.get('false', None)


class StyleObject(msrest.serialization.Model):
    """The stateset style model. The style rule could be a numeric type style rule or a boolean type style rule.  Refer to NumberRuleObject, StringRuleObject and BooleanRuleObject definitions `here <https://aka.ms/AzureMapsStatesetStylesObject>`_.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: BooleanTypeStyleRule, NumberTypeStyleRule, StringTypeStyleRule.

    All required parameters must be populated in order to send to Azure.

    :param key_name: Required. Stateset style key name. Key names are random strings but they
     should be unique inside style array.
    :type key_name: str
    :param type: Required. The type of stateset style.Constant filled by server.  Possible values
     include: "boolean", "number", "string".
    :type type: str or ~azure.maps.featurestate.models.StyleObjectType
    """

    _validation = {
        'key_name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'key_name': {'key': 'keyName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'boolean': 'BooleanTypeStyleRule', 'number': 'NumberTypeStyleRule', 'string': 'StringTypeStyleRule'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StyleObject, self).__init__(**kwargs)
        self.key_name = kwargs['key_name']
        self.type = None  # type: Optional[str]


class BooleanTypeStyleRule(StyleObject):
    """The boolean type style rule object.

    All required parameters must be populated in order to send to Azure.

    :param key_name: Required. Stateset style key name. Key names are random strings but they
     should be unique inside style array.
    :type key_name: str
    :param type: Required. The type of stateset style.Constant filled by server.  Possible values
     include: "boolean", "number", "string".
    :type type: str or ~azure.maps.featurestate.models.StyleObjectType
    :param rules: Required. Boolean style rules.
    :type rules: list[~azure.maps.featurestate.models.BooleanRuleObject]
    """

    _validation = {
        'key_name': {'required': True},
        'type': {'required': True},
        'rules': {'required': True},
    }

    _attribute_map = {
        'key_name': {'key': 'keyName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'rules': {'key': 'rules', 'type': '[BooleanRuleObject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BooleanTypeStyleRule, self).__init__(**kwargs)
        self.type = 'boolean'  # type: str
        self.rules = kwargs['rules']


class ErrorAdditionalInfo(msrest.serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(msrest.serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.maps.featurestate.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.maps.featurestate.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(msrest.serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).

    :param error: The error object.
    :type error: ~azure.maps.featurestate.models.ErrorDetail
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class FeatureStateObject(msrest.serialization.Model):
    """Single feature state model.

    :param key_name: Feature state Keyname. Maximum length allowed is 1000.
    :type key_name: str
    :param value: Value for the feature state. Type should comply with the style definition
     attached to the featurestate. Maximum length allowed for string type is 1024.
    :type value: any
    :param event_timestamp: Valid Timestamp when the feature state was captured.
    :type event_timestamp: str
    """

    _attribute_map = {
        'key_name': {'key': 'keyName', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
        'event_timestamp': {'key': 'eventTimestamp', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(FeatureStateObject, self).__init__(**kwargs)
        self.key_name = kwargs.get('key_name', None)
        self.value = kwargs.get('value', None)
        self.event_timestamp = kwargs.get('event_timestamp', None)


class FeatureStatesStructure(msrest.serialization.Model):
    """The feature states model for a feature.

    :param states: The feature states array.
    :type states: list[~azure.maps.featurestate.models.FeatureStateObject]
    """

    _attribute_map = {
        'states': {'key': 'states', 'type': '[FeatureStateObject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(FeatureStatesStructure, self).__init__(**kwargs)
        self.states = kwargs.get('states', None)


class NumberRuleObject(msrest.serialization.Model):
    """The numeric rule. The color is selected from the first range it falls into.

    :param range: The numeric value range for this style rule. If the value is in the range, all
     the conditions must hold true.
    :type range: ~azure.maps.featurestate.models.RangeObject
    :param color: The color when value is within the range. Color is a JSON string in a variety of
     permitted formats, HTML-style hex values, RGB ("#ff0", "#ffff00", "rgb(255, 255, 0)"), RGBA
     ("rgba(255, 255, 0, 1)"), HSL("hsl(100, 50%, 50%)"), and HSLA("hsla(100, 50%, 50%, 1)").
     Predefined HTML colors names, like yellow and blue, are also permitted.
    :type color: str
    """

    _attribute_map = {
        'range': {'key': 'range', 'type': 'RangeObject'},
        'color': {'key': 'color', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(NumberRuleObject, self).__init__(**kwargs)
        self.range = kwargs.get('range', None)
        self.color = kwargs.get('color', None)


class NumberTypeStyleRule(StyleObject):
    """The numeric type style rule object.

    All required parameters must be populated in order to send to Azure.

    :param key_name: Required. Stateset style key name. Key names are random strings but they
     should be unique inside style array.
    :type key_name: str
    :param type: Required. The type of stateset style.Constant filled by server.  Possible values
     include: "boolean", "number", "string".
    :type type: str or ~azure.maps.featurestate.models.StyleObjectType
    :param rules: Required. Numeric style rules.
    :type rules: list[~azure.maps.featurestate.models.NumberRuleObject]
    """

    _validation = {
        'key_name': {'required': True},
        'type': {'required': True},
        'rules': {'required': True},
    }

    _attribute_map = {
        'key_name': {'key': 'keyName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'rules': {'key': 'rules', 'type': '[NumberRuleObject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(NumberTypeStyleRule, self).__init__(**kwargs)
        self.type = 'number'  # type: str
        self.rules = kwargs['rules']


class RangeObject(msrest.serialization.Model):
    """The numeric value range for this style rule. If the value is in the range, all the conditions must hold true.

    :param minimum: All the number x that x ≥ minimum.
    :type minimum: float
    :param maximum: All the number x that x ≤ maximum.
    :type maximum: float
    :param exclusive_minimum: All the number x that x > exclusiveMinimum.
    :type exclusive_minimum: float
    :param exclusive_maximum: All the number x that x < exclusiveMaximum.
    :type exclusive_maximum: float
    """

    _attribute_map = {
        'minimum': {'key': 'minimum', 'type': 'float'},
        'maximum': {'key': 'maximum', 'type': 'float'},
        'exclusive_minimum': {'key': 'exclusiveMinimum', 'type': 'float'},
        'exclusive_maximum': {'key': 'exclusiveMaximum', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RangeObject, self).__init__(**kwargs)
        self.minimum = kwargs.get('minimum', None)
        self.maximum = kwargs.get('maximum', None)
        self.exclusive_minimum = kwargs.get('exclusive_minimum', None)
        self.exclusive_maximum = kwargs.get('exclusive_maximum', None)


class StatesetCreatedResponse(msrest.serialization.Model):
    """The response model for the successful Stateset Create API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar stateset_id: The ID for the new stateset created.
    :vartype stateset_id: str
    """

    _validation = {
        'stateset_id': {'readonly': True},
    }

    _attribute_map = {
        'stateset_id': {'key': 'statesetId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StatesetCreatedResponse, self).__init__(**kwargs)
        self.stateset_id = None


class StatesetGetResponse(msrest.serialization.Model):
    """The response model for the successful Stateset Get API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Description associated with the stateset.
    :vartype description: str
    :param dataset_ids: Dataset ID associated with the stateset.
    :type dataset_ids: list[str]
    :param stateset_style: The styles model.
    :type stateset_style: ~azure.maps.featurestate.models.StylesObject
    """

    _validation = {
        'description': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'dataset_ids': {'key': 'datasetIds', 'type': '[str]'},
        'stateset_style': {'key': 'statesetStyle', 'type': 'StylesObject'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StatesetGetResponse, self).__init__(**kwargs)
        self.description = None
        self.dataset_ids = kwargs.get('dataset_ids', None)
        self.stateset_style = kwargs.get('stateset_style', None)


class StatesetInfoObject(msrest.serialization.Model):
    """The stateset information detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param stateset_id: The stateset ID of this stateset.
    :type stateset_id: str
    :ivar description: Description associated with the stateset.
    :vartype description: str
    :param dataset_ids: Dataset ID associated with the stateset.
    :type dataset_ids: list[str]
    :param stateset_style: The styles model.
    :type stateset_style: ~azure.maps.featurestate.models.StylesObject
    """

    _validation = {
        'description': {'readonly': True},
    }

    _attribute_map = {
        'stateset_id': {'key': 'statesetId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'dataset_ids': {'key': 'datasetIds', 'type': '[str]'},
        'stateset_style': {'key': 'statesetStyle', 'type': 'StylesObject'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StatesetInfoObject, self).__init__(**kwargs)
        self.stateset_id = kwargs.get('stateset_id', None)
        self.description = None
        self.dataset_ids = kwargs.get('dataset_ids', None)
        self.stateset_style = kwargs.get('stateset_style', None)


class StatesetListResponse(msrest.serialization.Model):
    """The response model for the successful Stateset List API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param statesets: A list of statesets information.
    :type statesets: list[~azure.maps.featurestate.models.StatesetInfoObject]
    :ivar next_link: If present, the location of the next page of data.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'statesets': {'key': 'statesets', 'type': '[StatesetInfoObject]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StatesetListResponse, self).__init__(**kwargs)
        self.statesets = kwargs.get('statesets', None)
        self.next_link = None


class StringTypeStyleRule(StyleObject):
    """The string type style rule object.

    All required parameters must be populated in order to send to Azure.

    :param key_name: Required. Stateset style key name. Key names are random strings but they
     should be unique inside style array.
    :type key_name: str
    :param type: Required. The type of stateset style.Constant filled by server.  Possible values
     include: "boolean", "number", "string".
    :type type: str or ~azure.maps.featurestate.models.StyleObjectType
    :param rules: Required. String style rules.
    :type rules: list[dict[str, str]]
    """

    _validation = {
        'key_name': {'required': True},
        'type': {'required': True},
        'rules': {'required': True},
    }

    _attribute_map = {
        'key_name': {'key': 'keyName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'rules': {'key': 'rules', 'type': '[{str}]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StringTypeStyleRule, self).__init__(**kwargs)
        self.type = 'string'  # type: str
        self.rules = kwargs['rules']


class StylesObject(msrest.serialization.Model):
    """The styles model.

    :param styles: An array of stateset styles. The style rule could be a numeric or string or a
     boolean type style rule.  Refer to NumberRuleObject, StringRuleObject and BooleanRuleObject
     definitions `here <https://aka.ms/AzureMapsStatesetStylesObject>`_.
    :type styles: list[~azure.maps.featurestate.models.StyleObject]
    """

    _attribute_map = {
        'styles': {'key': 'styles', 'type': '[StyleObject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StylesObject, self).__init__(**kwargs)
        self.styles = kwargs.get('styles', None)
