# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional

from azure.core import AsyncPipelineClient
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from msrest import Deserializer, Serializer

from ._configuration import MapsClientConfiguration
from .operations import AliasOperations
from .operations import DataOperations
from .operations import DatasetOperations
from .operations import ElevationOperations
from .operations import ConversionOperations
from .operations import FeatureStateOperations
from .operations import GeolocationOperations
from .operations import MobilityOperations
from .operations import RenderOperations
from .operations import RenderV2Operations
from .operations import RouteOperations
from .operations import SearchOperations
from .operations import SpatialOperations
from .operations import TilesetOperations
from .operations import TimezoneOperations
from .operations import TrafficOperations
from .operations import WeatherOperations
from .operations import WFSOperations
from .. import models


class MapsClient(object):
    """APIs for managing aliases in Azure Maps.

    :ivar alias: AliasOperations operations
    :vartype alias: azure.maps.service.aio.operations.AliasOperations
    :ivar data: DataOperations operations
    :vartype data: azure.maps.service.aio.operations.DataOperations
    :ivar dataset: DatasetOperations operations
    :vartype dataset: azure.maps.service.aio.operations.DatasetOperations
    :ivar elevation: ElevationOperations operations
    :vartype elevation: azure.maps.service.aio.operations.ElevationOperations
    :ivar conversion: ConversionOperations operations
    :vartype conversion: azure.maps.service.aio.operations.ConversionOperations
    :ivar feature_state: FeatureStateOperations operations
    :vartype feature_state: azure.maps.service.aio.operations.FeatureStateOperations
    :ivar geolocation: GeolocationOperations operations
    :vartype geolocation: azure.maps.service.aio.operations.GeolocationOperations
    :ivar mobility: MobilityOperations operations
    :vartype mobility: azure.maps.service.aio.operations.MobilityOperations
    :ivar render: RenderOperations operations
    :vartype render: azure.maps.service.aio.operations.RenderOperations
    :ivar render_v2: RenderV2Operations operations
    :vartype render_v2: azure.maps.service.aio.operations.RenderV2Operations
    :ivar route: RouteOperations operations
    :vartype route: azure.maps.service.aio.operations.RouteOperations
    :ivar search: SearchOperations operations
    :vartype search: azure.maps.service.aio.operations.SearchOperations
    :ivar spatial: SpatialOperations operations
    :vartype spatial: azure.maps.service.aio.operations.SpatialOperations
    :ivar tileset: TilesetOperations operations
    :vartype tileset: azure.maps.service.aio.operations.TilesetOperations
    :ivar timezone: TimezoneOperations operations
    :vartype timezone: azure.maps.service.aio.operations.TimezoneOperations
    :ivar traffic: TrafficOperations operations
    :vartype traffic: azure.maps.service.aio.operations.TrafficOperations
    :ivar weather: WeatherOperations operations
    :vartype weather: azure.maps.service.aio.operations.WeatherOperations
    :ivar wfs: WFSOperations operations
    :vartype wfs: azure.maps.service.aio.operations.WFSOperations
    :param subscription_key: One of the Azure Maps keys provided from an Azure Map Account. Please refer to this `article <https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication>`_ for details on how to manage authentication.
    :type subscription_key: str
    :param x_ms_client_id: Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following `articles <https://aka.ms/amauthdetails>`_ for guidance.
    :type x_ms_client_id: str
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        subscription_key: Optional[str] = None,
        x_ms_client_id: Optional[str] = None,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://atlas.microsoft.com'
        self._config = MapsClientConfiguration(subscription_key, x_ms_client_id, **kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.alias = AliasOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.data = DataOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.dataset = DatasetOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.elevation = ElevationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.conversion = ConversionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.feature_state = FeatureStateOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.geolocation = GeolocationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.mobility = MobilityOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.render = RenderOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.render_v2 = RenderV2Operations(
            self._client, self._config, self._serialize, self._deserialize)
        self.route = RouteOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.search = SearchOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.spatial = SpatialOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.tileset = TilesetOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.timezone = TimezoneOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.traffic = TrafficOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.weather = WeatherOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.wfs = WFSOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def _send_request(self, http_request: HttpRequest, **kwargs: Any) -> AsyncHttpResponse:
        """Runs the network request through the client's chained policies.

        :param http_request: The network request you want to make. Required.
        :type http_request: ~azure.core.pipeline.transport.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to True.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.pipeline.transport.AsyncHttpResponse
        """
        http_request.url = self._client.format_url(http_request.url)
        stream = kwargs.pop("stream", True)
        pipeline_response = await self._client._pipeline.run(http_request, stream=stream, **kwargs)
        return pipeline_response.http_response

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "MapsClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
