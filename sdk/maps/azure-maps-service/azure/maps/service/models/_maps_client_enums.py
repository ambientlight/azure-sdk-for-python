# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class AbsoluteDirection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The absolute walking direction associated with this step.
    """

    #: North.
    NORTH = "north"
    #: NorthEast.
    NORTHEAST = "northeast"
    #: East.
    EAST = "east"
    #: SouthEast.
    SOUTHEAST = "southeast"
    #: South.
    SOUTH = "south"
    #: SouthWest.
    SOUTHWEST = "southwest"
    #: West.
    WEST = "west"
    #: NorthWest.
    NORTHWEST = "northwest"

class AgencyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The Id of the transit agency, e.g. '5872'.
    AGENCY_ID = "agencyId"
    #: The agency’s GTFS Id.:code:`<br>` **Note**\ : When this value is used, the metroId parameter is
    #: required.
    AGENCY_KEY = "agencyKey"
    #: The name of the transit agency, e.g. Metro Transit.
    AGENCY_NAME = "agencyName"

class AlternativeRouteType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Allow any alternative route to be returned irrespective of how it compares to the reference
    #: route in terms of optimality.
    ANY_ROUTE = "anyRoute"
    #: Return an alternative route only if it is better than the reference route according to the
    #: given planning criteria.
    BETTER_ROUTE = "betterRoute"

class Avoid(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Avoids toll roads.
    TOLL_ROADS = "tollRoads"
    #: Avoids motorways.
    MOTORWAYS = "motorways"
    #: Avoids ferries.
    FERRIES = "ferries"
    #: Avoids unpaved roads.
    UNPAVED_ROADS = "unpavedRoads"
    #: Avoids routes that require the use of carpool (HOV/High Occupancy Vehicle) lanes.
    CARPOOLS = "carpools"
    #: Avoids using the same road multiple times. Most useful in conjunction with ``routeType``\
    #: =thrilling.
    ALREADY_USED_ROADS = "alreadyUsedRoads"
    #: Avoids border crossings in route calculation.
    BORDER_CROSSINGS = "borderCrossings"

class ComputeTravelTimeFor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Does not compute additional travel times.
    NONE = "none"
    #: Computes travel times for all types of traffic information and specifies all results in the
    #: fields noTrafficTravelTimeInSeconds, historicTrafficTravelTimeInSeconds and
    #: liveTrafficIncidentsTravelTimeInSeconds being included in the summaries in the route response.
    ALL = "all"

class ConnectorSet(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: These are the standard household connectors for a certain region. They are all AC single phase
    #: and the standard Voltage and standard Amperage.
    #: 
    #: See also: `Plug & socket types - World Standards
    #: <https://www.worldstandards.eu/electricity/plugs-and-sockets>`_.
    STANDARD_HOUSEHOLD_COUNTRY_SPECIFIC = "StandardHouseholdCountrySpecific"
    #: Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original
    #: manufacturer or SAE J1772 after the standard that first published it. Mostly used in
    #: combination with 120V single phase or up to 240V single phase infrastructure.
    IEC62196_TYPE1 = "IEC62196Type1"
    #: Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on
    #: the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct
    #: current (DC) contacts to allow DC fast charging.
    IEC62196_TYPE1_CCS = "IEC62196Type1CCS"
    #: Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached
    #: to the charging point.
    IEC62196_TYPE2_CABLE_ATTACHED = "IEC62196Type2CableAttached"
    #: Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the
    #: charging point.
    IEC62196_TYPE2_OUTLET = "IEC62196Type2Outlet"
    #: Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on
    #: the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct
    #: current (DC) contacts to allow DC fast charging.
    IEC62196_TYPE2_CCS = "IEC62196Type2CCS"
    #: Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original
    #: manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase
    #: infrastructure.
    IEC62196_TYPE3 = "IEC62196Type3"
    #: CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and
    #: industrial partners. Because of this is is also known as the TEPCO's connector. It supports
    #: fast DC charging.
    CHADEMO = "Chademo"
    #: Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime
    #: referred to as by some combination of the standard, the color and the fact that is a single
    #: phase connector. The connector usually has the "P+N+E, 6h" configuration.
    IEC60309_AC1_PHASE_BLUE = "IEC60309AC1PhaseBlue"
    #: Industrial White connector is a DC connector defined in the IEC 60309 standard.
    IEC60309_DC_WHITE = "IEC60309DCWhite"
    #: The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to
    #: either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to
    #: North America or the modified Type 2 (DC over Type 2) in Europe.
    TESLA = "Tesla"

class ConversionInputType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: DWG file format.
    DWG = "DWG"

class DatasetType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Facility Maps data type.
    FACILITY = "facility"

class DestinationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The destination of the route as a comma separated string composed by latitude followed by
    #: longitude e.g. "47.641268,-122.125679".
    POSITION = "position"
    #: The unique Azure Maps identifier for the respective public transit stop. When referring to
    #: public transit stops over time, it is recommended to use ``stopId`` since it will not change,
    #: as long as the physical stop exists.
    STOP_ID = "stopId"
    #: The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are subject to
    #: change.:code:`<br>` **Note**\ : When this value is used, the metroId parameter is required.
    STOP_KEY = "stopKey"

class DominantPollutant(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Type of pollutant. Please note that more may be added at any time.
    """

    #: Carbon monoxide ("CO").
    CARBON_MONOXIDE = "Carbon Monoxide"
    #: Nitrogen dioxide ("NO2").
    NITROGEN_DIOXIDE = "Nitrogen Dioxide"
    #: Ozone ("O3").
    OZONE = "Ozone"
    #: Particulate matter 2.5 ("PM2.5").
    PARTICULATE_MATTER2_5 = "Particulate Matter 2.5"
    #: Particulate matter 10 ("PM10").
    PARTICULATE_MATTER10 = "Particulate Matter 10"
    #: Sulfur dioxide ("SO2").
    SULFUR_DIOXIDE = "Sulfur Dioxide"

class DrivingSide(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Indicates left-hand vs. right-hand side driving at the point of the maneuver.
    """

    #: Left side.
    LEFT = "LEFT"
    #: Right side.
    RIGHT = "RIGHT"

class EntityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Geography entity type. Present only when entityType was requested and is available.
    """

    #: Country name.
    COUNTRY = "Country"
    #: State or Province.
    COUNTRY_SUBDIVISION = "CountrySubdivision"
    #: County.
    COUNTRY_SECONDARY_SUBDIVISION = "CountrySecondarySubdivision"
    #: Named Area.
    COUNTRY_TERTIARY_SUBDIVISION = "CountryTertiarySubdivision"
    #: City / Town.
    MUNICIPALITY = "Municipality"
    #: Sub / Super City.
    MUNICIPALITY_SUBDIVISION = "MunicipalitySubdivision"
    #: Neighbourhood.
    NEIGHBOURHOOD = "Neighbourhood"
    #: Postal Code / Zip Code.
    POSTAL_CODE_AREA = "PostalCodeArea"

class EntryPointType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of entry point. Value can be either *main* or *minor*.
    """

    MAIN = "main"
    MINOR = "minor"

class Enum36(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    YES = "yes"
    NO = "no"

class Enum68(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EPSG900913 = "EPSG900913"
    EPSG4326 = "EPSG4326"

class GeofenceMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Publish all the query results to Azure Maps account event subscription.
    ALL = "All"
    #: Only publish result when user location is considered as crossing geofencing boarder.
    ENTER_AND_EXIT = "EnterAndExit"

class GeoJSONGeometryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies the ``GeoJSON`` geometry type. Must be one of the seven valid GeoJSON geometry types
    - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection.
    """

    #: ``GeoJSON Point`` geometry.
    POINT = "Point"
    #: ``GeoJSON MultiPoint`` geometry.
    MULTI_POINT = "MultiPoint"
    #: ``GeoJSON LineString`` geometry.
    LINE_STRING = "LineString"
    #: ``GeoJSON MultiLineString`` geometry.
    MULTI_LINE_STRING = "MultiLineString"
    #: ``GeoJSON Polygon`` geometry.
    POLYGON = "Polygon"
    #: ``GeoJSON MultiPolygon`` geometry.
    MULTI_POLYGON = "MultiPolygon"
    #: ``GeoJSON GeometryCollection`` geometry.
    GEOMETRY_COLLECTION = "GeometryCollection"

class GeometryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """type of geometry returned
    """

    POINT = "Point"
    MULTI_POINT = "MultiPoint"
    LINE_STRING = "LineString"
    MULTI_LINE_STRING = "MultiLineString"
    POLYGON = "Polygon"
    MULTI_POLYGON = "MultiPolygon"
    GEOMETRY_COLLECTION = "GeometryCollection"

class GuidanceInstructionType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Type of the instruction, e.g., turn or change of road form.
    """

    #: Turn.
    TURN = "TURN"
    #: Road Change.
    ROAD_CHANGE = "ROAD_CHANGE"
    #: Departure location.
    LOCATION_DEPARTURE = "LOCATION_DEPARTURE"
    #: Arrival location.
    LOCATION_ARRIVAL = "LOCATION_ARRIVAL"
    #: Direction information.
    DIRECTION_INFO = "DIRECTION_INFO"
    #: Way point location.
    LOCATION_WAYPOINT = "LOCATION_WAYPOINT"

class GuidanceManeuver(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A code identifying the maneuver.
    """

    #: You have arrived.
    ARRIVE = "ARRIVE"
    #: You have arrived. Your destination is on the left.
    ARRIVE_LEFT = "ARRIVE_LEFT"
    #: You have arrived. Your destination is on the right.
    ARRIVE_RIGHT = "ARRIVE_RIGHT"
    #: Leave.
    DEPART = "DEPART"
    #: Keep straight on.
    STRAIGHT = "STRAIGHT"
    #: Keep right.
    KEEP_RIGHT = "KEEP_RIGHT"
    #: Bear right.
    BEAR_RIGHT = "BEAR_RIGHT"
    #: Turn right.
    TURN_RIGHT = "TURN_RIGHT"
    #: Turn sharp right.
    SHARP_RIGHT = "SHARP_RIGHT"
    #: Keep left.
    KEEP_LEFT = "KEEP_LEFT"
    #: Bear left.
    BEAR_LEFT = "BEAR_LEFT"
    #: Turn left.
    TURN_LEFT = "TURN_LEFT"
    #: Turn sharp left.
    SHARP_LEFT = "SHARP_LEFT"
    #: Make a U-turn.
    MAKE_UTURN = "MAKE_UTURN"
    #: Take the motorway.
    ENTER_MOTORWAY = "ENTER_MOTORWAY"
    #: Take the freeway.
    ENTER_FREEWAY = "ENTER_FREEWAY"
    #: Take the highway.
    ENTER_HIGHWAY = "ENTER_HIGHWAY"
    #: Take the exit.
    TAKE_EXIT = "TAKE_EXIT"
    #: Take the left exit.
    MOTORWAY_EXIT_LEFT = "MOTORWAY_EXIT_LEFT"
    #: Take the right exit.
    MOTORWAY_EXIT_RIGHT = "MOTORWAY_EXIT_RIGHT"
    #: Take the ferry.
    TAKE_FERRY = "TAKE_FERRY"
    #: Cross the roundabout.
    ROUNDABOUT_CROSS = "ROUNDABOUT_CROSS"
    #: At the roundabout take the exit on the right.
    ROUNDABOUT_RIGHT = "ROUNDABOUT_RIGHT"
    #: At the roundabout take the exit on the left.
    ROUNDABOUT_LEFT = "ROUNDABOUT_LEFT"
    #: Go around the roundabout.
    ROUNDABOUT_BACK = "ROUNDABOUT_BACK"
    #: Try to make a U-turn.
    TRY_MAKE_UTURN = "TRY_MAKE_UTURN"
    #: Follow.
    FOLLOW = "FOLLOW"
    #: Switch to the parallel road.
    SWITCH_PARALLEL_ROAD = "SWITCH_PARALLEL_ROAD"
    #: Switch to the main road.
    SWITCH_MAIN_ROAD = "SWITCH_MAIN_ROAD"
    #: Take the ramp.
    ENTRANCE_RAMP = "ENTRANCE_RAMP"
    #: You have reached the waypoint. It is on the left.
    WAYPOINT_LEFT = "WAYPOINT_LEFT"
    #: You have reached the waypoint. It is on the right.
    WAYPOINT_RIGHT = "WAYPOINT_RIGHT"
    #: You have reached the waypoint.
    WAYPOINT_REACHED = "WAYPOINT_REACHED"

class Hilliness(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: low.
    LOW = "low"
    #: normal.
    NORMAL = "normal"
    #: high.
    HIGH = "high"

class ImportDataType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Area and point element data.
    FIXTURE = "fixture"

class IncidentGeometryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Places incidents precisely on the road.
    ORIGINAL = "original"
    #: Moves the incident slightly (depending on zoom level) to indicate specific road lanes.
    SHIFTED = "shifted"

class JsonFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `The JavaScript Object Notation Data Interchange Format
    #: <https://tools.ietf.org/html/rfc8259>`_.
    JSON = "json"

class JunctionType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of the junction where the maneuver takes place. For larger roundabouts, two separate
    instructions are generated for entering and leaving the roundabout.
    """

    #: regular.
    REGULAR = "REGULAR"
    #: roundabout.
    ROUNDABOUT = "ROUNDABOUT"
    #: bifurcation.
    BIFURCATION = "BIFURCATION"

class LatestStatusKeyword(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Keyword for the latest status of the alert.
    """

    #: "New" - the status of an alert upon initial issuance.
    NEW = "New"
    #: "Extend" - the alert has been extended in time, in area, or both since its initial issuance.
    EXTEND = "Extend"
    #: "Cancel" - the alert has been canceled prior to its original expiration time.
    CANCEL = "Cancel"
    #: "Correct" - the alert has been modified to correct a previous error.
    CORRECT = "Correct"
    #: "Expire" - the alert has expired and is no longer active.
    EXPIRE = "Expire"
    #: "Upgrade" - the alert has been upgraded to a higher class or category since its initial
    #: issuance.
    UPGRADE = "Upgrade"
    #: "Continue" - the alert has been updated since its initial issuance, but no changes were made to
    #: ``alertAreas``\ , ``startTime``\ , ``endTime``\ , or ``class``.
    CONTINUE_ENUM = "Continue"
    #: "Update" - the alert has been updated since its initial issuance.
    UPDATE = "Update"

class LegType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Pedestrian walk.
    WALK = "Walk"
    #: Bicycle.
    BICYCLE = "Bicycle"
    #: Tram.
    TRAM = "Tram"
    #: Subway.
    SUBWAY = "Subway"
    #: Rail.
    RAIL = "Rail"
    #: Bus.
    BUS = "Bus"
    #: Ferry.
    FERRY = "Ferry"
    #: Cable Car.
    CABLE = "Cable"
    #: Gondola.
    GONDOLA = "Gondola"
    #: Funicular.
    FUNICULAR = "Funicular"
    #: A Leg describing a walk within a compound, e.g. Central Station.
    PATH_WAY_WALK = "PathWayWalk"
    #: A Leg describing a wait for the next public transit leg.
    WAIT = "Wait"
    #: It’s necessary to wait for the next leg on the same vehicle (i.e. the bus will only change its
    #: line number).
    WAIT_ON_VEHICLE = "WaitOnVehicle"

class MagnitudeOfDelay(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The magnitude of delay caused by the incident. These values correspond to the values of the
    response field ty of the `Get Traffic Incident Detail API
    <https://docs.microsoft.com/rest/api/maps/traffic/gettrafficincidentdetail>`_.
    """

    #: Unknown.
    ZERO = "0"
    #: Minor.
    ONE = "1"
    #: Moderate.
    TWO = "2"
    #: Major.
    THREE = "3"
    #: Undefined, used for road closures and other indefinite delays.
    FOUR = "4"

class MapImageryStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Satellite imagery.
    SATELLITE = "satellite"

class MapImageStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Azure Maps main style.
    MAIN = "main"
    #: Dark grey version of the Azure Maps main style.
    DARK = "dark"

class MapTileLayer(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Returns a tile containing all map features including polygons, borders, roads and labels.
    BASIC = "basic"
    #: Returns a tile containing borders, roads, and labels, and can be overlaid on other tiles (such
    #: as satellite imagery) to produce hybrid tiles.
    HYBRID = "hybrid"
    #: Returns a tile of just the map's label information.
    LABELS = "labels"
    #: Map canvas complete with shaded relief tiles. Zoom levels 0-6 (inclusive) are supported. Png is
    #: the only supported TileFormat and only available MapTileSize is 512.
    TERRA = "terra"

class MapTileSize(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Return a 256 by 256 pixel tile.
    TWO_HUNDRED_FIFTY_SIX = "256"
    #: Return a 512 by 512 pixel tile.
    FIVE_HUNDRED_TWELVE = "512"

class MapTileStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Azure Maps main style.
    MAIN = "main"
    #: Dark grey version of the Azure Maps main style. PNG is the only supported TileFormat.
    DARK = "dark"
    #: Azure Maps main style completed with shaded relief. Supported by Layer terra.
    SHADED_RELIEF = "shaded_relief"

class MetroAreaDetailType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Return a list of all public transit agencies operating in the given metro area.
    AGENCIES = "agencies"
    #: Returns a list of all active service alerts, that are defined in the metro or agency level, and
    #: are not connected to a specific line or stop.
    ALERTS = "alerts"
    #: Applicable only when alerts are requested. Returns details of the alerts.
    ALERT_DETAILS = "alertDetails"
    #: Returns a list of all supported transit types in the given metro area.
    TRANSIT_TYPES = "transitTypes"

class MetroAreaQueryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The origin of the route as a comma separated string composed by latitude followed by longitude
    #: e.g. "47.641268,-122.125679".
    POSITION = "position"
    #: 2-character `ISO 3166-1 <https://www.iso.org/iso-3166-country-codes.html>`_ alpha-2 country
    #: code. E.g. US.
    COUNTRY_CODE = "countryCode"

class ModeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: walk (pedestrian).
    WALK = "walk"
    #: bike.
    BIKE = "bike"
    #: public transit.
    PUBLIC_TRANSIT = "publicTransit"

class OpeningHours(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Shows the hours of operation for the next week, starting with the current day in the local time
    #: of the POI.
    NEXT_SEVEN_DAYS = "nextSevenDays"

class OriginType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The origin of the route as a comma separated string composed by latitude followed by longitude
    #: e.g. "47.641268,-122.125679".
    POSITION = "position"
    #: The unique Azure Maps identifier for the respective public transit stop. When referring to
    #: public transit stops over time, it is recommended to use ``stopId`` since it will not change,
    #: as long as the physical stop exists.
    STOP_ID = "stopId"
    #: The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are subject to
    #: change.:code:`<br>` **Note**\ : When this value is used, the metroId parameter is required.
    STOP_KEY = "stopKey"

class PollutantType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Type of pollutant. Please note that more may be added at any time.
    """

    #: Carbon monoxide ("CO").
    CO = "CO"
    #: Nitrogen dioxide ("NO2").
    NO2 = "NO2"
    #: Ozone ("O3").
    O3 = "O3"
    #: Particulate matter 2.5 ("PM2.5").
    PM2_5 = "PM2.5"
    #: Particulate matter 10 ("PM10").
    PM10 = "PM10"
    #: Sulfur dioxide ("SO2").
    SO2 = "SO2"

class Quarter(with_metaclass(_CaseInsensitiveEnumMeta, int, Enum)):
    """Quarter of the day.
    """

    #: 7:00 am - 1:00 pm / 7:00- 13:00.
    ZERO = 0
    #: 1:00 pm - 7:00 pm/ 13:00- 19:00.
    ONE = 1
    #: 7:00 pm - 1:00 am/ 19:00 - 01:00.
    TWO = 2
    #: 1:00 am - 7:00 am/ 01:00 - 07:00.
    THREE = 3

class RasterTileFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: An image in the png format. Supports zoom levels 0 through 18.
    PNG = "png"

class RealTimeArrivalsQueryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: One or multiple stops as a comma separated list. Returns the requested number of live arrivals
    #: for all lines arriving at the specified stop. Defined by parameter stopQueryType.
    STOPS = "stops"
    #: Returns the next live arrival times for each stop within the specified line. lineId, for
    #: example, '3785742'.
    LINE = "line"
    #: Returns up to three next Live Arrival times for a given line at a given stop. Comma-separated
    #: list including lineId and stop identifier, for example, 1228526,14014071 (lineId,stopId).
    LINE_AND_STOP = "lineAndStop"
    #: Returns arrivals of a line to stops near the user’s location. The applicable location query
    #: specified as a comma separated string composed by latitude followed by longitude e.g.
    #: "47.641268,-122.125679".
    POSITION = "position"

class RelativeDirection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The relative walking direction associated with applicable step.
    """

    #: Leave.
    DEPART = "depart"
    #: Turn sharp left.
    HARD_LEFT = "hardLeft"
    #: Turn left.
    LEFT = "left"
    #: Turn slightly left.
    SLIGHTLY_LEFT = "slightlyLeft"
    #: Keep going.
    CONTINUE_ENUM = "continue"
    #: Turn slightly right.
    SLIGHTLY_RIGHT = "slightlyRight"
    #: Turn right.
    RIGHT = "right"
    #: Turn sharp right.
    HARD_RIGHT = "hardRight"
    #: Circle clockwise.
    CIRCLE_CLOCKWISE = "circleClockwise"
    #: Circle counter clockwise.
    CIRCLE_COUNTERCLOCKWISE = "circleCounterclockwise"
    #: Take the elevator.
    ELEVATOR = "elevator"
    #: Make a U-turn left.
    UTURN_LEFT = "uturnLeft"
    #: Make a U-turn right.
    UTURN_RIGHT = "uturnRight"

class RouteInstructionsType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Returns raw instruction data without human-readable messages.
    CODED = "coded"
    #: Returns raw instructions data with human-readable messages in plain text.
    TEXT = "text"
    #: Returns raw instruction data with tagged human-readable messages to permit formatting. A human-
    #: readable message is built up from repeatable identified elements. These are tagged to allow
    #: client applications to format them correctly. The following message components are tagged when
    #: instructionsType=tagged: street, roadNumber, signpostText, exitNumber, roundaboutExitNumber.
    #: 
    #: Example of tagged 'Turn left' message:​
    #: 
    #: .. code-block::
    #: 
    #:    Turn left onto <roadNumber>A4</roadNumber>/<roadNumber>E19</roadNumber>
    #:    towards <signpostText>Den Haag</signpostText>.
    TAGGED = "tagged"

class RouteRepresentation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Includes route geometry in the response.
    POLYLINE = "polyline"
    #: Summary as per polyline but excluding the point geometry elements for the routes in the
    #: response.
    SUMMARY_ONLY = "summaryOnly"
    #: Includes only the optimized waypoint indices but does not include the route geometry in the
    #: response.
    NONE = "none"

class RouteType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The fastest route.
    FASTEST = "fastest"
    #: The shortest route by distance.
    SHORTEST = "shortest"
    #: A route balanced by economy and speed.
    ECO = "eco"
    #: Includes interesting or challenging roads and uses as few motorways as possible. You can choose
    #: the level of turns included and also the degree of hilliness. See the hilliness and windingness
    #: parameters for how to set this. There is a limit of 900 km on routes planned with
    #: ``routeType``\ =thrilling.
    THRILLING = "thrilling"

class ScheduleType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Whether the result is based on real-time or static data.
    """

    #: Returned when estimated time of arrival is based on real-time data.
    SCHEDULED_TIME = "scheduledTime"
    #: Returned when estimated time of arrival is based on static data.
    REAL_TIME = "realTime"

class SearchIndexSet(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Address range interpolation.
    ADDR = "Addr"
    #: Geographies.
    GEO = "Geo"
    #: Point Addresses.
    PAD = "PAD"
    #: Points of interest.
    POI = "POI"
    #: Streets.
    STR = "Str"
    #: Cross Streets (Intersections).
    XSTR = "Xstr"

class SectionType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Get sections if the route includes car trains.
    CAR_TRAIN = "carTrain"
    #: Countries the route has parts in.
    COUNTRY = "country"
    #: Get sections if the route includes ferries.
    FERRY = "ferry"
    #: Get sections if the route includes motorways.
    MOTORWAY = "motorway"
    #: Get sections which are suited for pedestrians.
    PEDESTRIAN = "pedestrian"
    #: Get sections which require a toll to be payed.
    TOLL_ROAD = "tollRoad"
    #: Get sections which require a toll vignette to be present.
    TOLL_VIGNETTE = "tollVignette"
    #: Get sections which contain traffic information.
    TRAFFIC = "traffic"
    #: Get sections in relation to the request parameter ``travelMode``.
    TRAVEL_MODE = "travelMode"
    #: Get sections if the route includes tunnels.
    TUNNEL = "tunnel"

class SpeedUnit(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Kilometers Per Hour.
    KMPH = "KMPH"
    #: Miles Per Hour.
    MPH = "MPH"

class StaticMapLayer(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Returns an image containing all map features including polygons, borders, roads and labels.
    BASIC = "basic"
    #: Returns an image containing borders, roads, and labels, and can be overlaid on other tiles
    #: (such as satellite imagery) to produce hybrid tiles.
    HYBRID = "hybrid"
    #: Returns an image of just the map's label information.
    LABELS = "labels"

class StopQueryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The unique Azure Maps identifier for the respective public transit stop. When referring to
    #: public transit stops over time, it is recommended to use ``stopId`` since it will not change,
    #: as long as the physical stop exists.
    STOP_ID = "stopId"
    #: The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are subject to
    #: change.:code:`<br>` **Note**\ : When this value is used, the metroId parameter is required.
    STOP_KEY = "stopKey"

class StyleRuleBaseType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of stateset style.
    """

    NUMBER = "number"
    BOOLEAN = "boolean"
    STRING = "string"

class TextFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `The JavaScript Object Notation Data Interchange Format
    #: <https://tools.ietf.org/html/rfc8259>`_.
    JSON = "json"
    #: `The Extensible Markup Language <https://www.w3.org/TR/xml/>`_.
    XML = "xml"

class TileFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: An image in the png format. Supports zoom levels 0 through 18.
    PNG = "png"
    #: Vector graphic in the pbf format. Supports zoom levels 0 through 22.
    PBF = "pbf"

class TilesetID(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: A base map is a standard map that displays roads, natural and artificial features along with
    #: the labels for those features in a vector tile.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: vector (pbf).
    MICROSOFT_BASE = "microsoft.base"
    #: Displays labels for roads, natural and artificial features in a vector tile.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: vector (pbf).
    MICROSOFT_BASE_LABELS = "microsoft.base.labels"
    #: Displays road, boundary and label data in a vector tile.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: vector (pbf).
    MICROSOFT_BASE_HYBRID = "microsoft.base.hybrid"
    #: Shaded relief and terra layers.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 6. Format: raster (png).
    MICROSOFT_TERRA_MAIN = "microsoft.terra.main"
    #: All layers with our main style.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: raster (png).
    MICROSOFT_BASE_ROAD = "microsoft.base.road"
    #: All layers with our dark grey style.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: raster (png).
    MICROSOFT_BASE_DARKGREY = "microsoft.base.darkgrey"
    #: Label data in our main style.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: raster (png).
    MICROSOFT_BASE_LABELS_ROAD = "microsoft.base.labels.road"
    #: Road, boundary and label data in our main style.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: raster (png).
    MICROSOFT_BASE_HYBRID_ROAD = "microsoft.base.hybrid.road"
    #: A combination of satellite and aerial imagery. Only available in S1 pricing SKU.:code:`<br>`
    #: 
    #: Supports zoom levels 1 through 19. Format: raster (jpeg).
    MICROSOFT_IMAGERY = "microsoft.imagery"
    #: Weather radar tiles. Latest weather radar images including areas of rain, snow, ice and mixed
    #: conditions. Please see `coverage information <https://aka.ms/AzureMapsWeatherCoverage>`_ for
    #: Azure Maps Weather service.  To learn more about the Radar data, please see `Weather concepts
    #: <https://aka.ms/AzureMapsWeatherConcepts>`_.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 15. Format: raster (png).
    MICROSOFT_WEATHER_RADAR_MAIN = "microsoft.weather.radar.main"
    #: Weather infrared tiles. Latest Infrared Satellite images shows clouds by their temperature.
    #: Please see `coverage information <https://aka.ms/AzureMapsWeatherCoverage>`_ for Azure Maps
    #: Weather service. To learn more about the returned Satellite data, please see `Weather concepts
    #: <https://aka.ms/AzureMapsWeatherConcepts>`_.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 15. Format: raster (png).
    MICROSOFT_WEATHER_INFRARED_MAIN = "microsoft.weather.infrared.main"
    #: Digital Elevation Model tiles. The tiles are in the GeoTIFF format with a single 32-bit
    #: floating point band. The tiles cover the whole landmass of Earth. Some small islands (e.g.,
    #: atolls) might not be represented accurately.:code:`<br>`
    #: 
    #: 
    #: * The vertical unit for measurement of elevation height is meters. An elevation value of
    #: -32767.0 is used for points that have no data value, most often returned where there isn't
    #: landmass (i.e. water).:code:`<br>`
    #: * The horizontal reference datum is the World Geodetic System 1984 (WGS84-G1150) and the
    #: vertical reference datum is the Earth Gravitational Model 2008 (EGM2008).:code:`<br>`
    #: * Tiles are 258x258 pixel squares rather than the standard 256 x 256. This is done to allow for
    #: accurate interpolation of values at the tile edges. As such adjacent tiles overlap by 1 pixel
    #: along all edges.:code:`<br>`
    #: * Tile data comes from the `Airbus WorldDEM4Ortho product <https://www.intelligence-
    #: airbusds.com/worlddem-streaming/>`_. Urban areas are approximately leveled down to ground
    #: level. All other areas are represented by the object surface level (e.g., trees). :code:`<br>`
    #: 
    #: Supports zoom level 13 only. Format: raster (tiff).
    MICROSOFT_DEM = "microsoft.dem"

class TileSize(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Return a 256 by 256 pixel tile. Available for all tilesetIds except for
    #: 
    #: 
    #: * microsoft.terra.main.
    TWO_HUNDRED_FIFTY_SIX = "256"
    #: Return a 512 by 512 pixel tile.  Available for all tilesetIds except for
    #: 
    #: 
    #: * microsoft.weather.radar.main
    #: * microsoft.weather.infrared.main
    #: * microsoft.base.hybrid
    #: * microsoft.dem
    #: * microsoft.imagery.
    FIVE_HUNDRED_TWELVE = "512"

class TimeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: arrival at the destination point. Requires that 'time' value must be in the future.
    ARRIVAL = "arrival"
    #: Request departure at the destination point. Requires that 'time' value must be now or in the
    #: future.
    DEPARTURE = "departure"
    #: Request the last lines for the day.
    LAST = "last"

class TimezoneOptions(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Do not include zoneinfo or transitions in the result.
    NONE = "none"
    #: Include additional time zone info in the result.
    ZONE_INFO = "zoneInfo"
    #: Include transition information in the result (The number of transitions is currently capped at
    #: 250).
    TRANSITIONS = "transitions"
    #: Include both zoneinfo and transitions in the result.
    ALL = "all"

class TrafficFlowSegmentStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ABSOLUTE = "absolute"
    RELATIVE = "relative"
    RELATIVE_DELAY = "relative-delay"

class TrafficFlowTileStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Colors will reflect the absolute speed measured. Absolute speed is the capability to access the
    #: full speed.
    ABSOLUTE = "absolute"
    #: This is the speed relative to free-flow, highlighting areas of congestion visualizing the
    #: traffic flow. Free-flow refers to conditions where there is no congestion and traffic can
    #: follow the speed limits. The most used option to visualize traffic flow on a map.
    RELATIVE = "relative"
    #: Displays relative colors only where they are different from the free-flow speeds. This option
    #: will only highlights areas of congestion.
    RELATIVE_DELAY = "relative-delay"
    #: Displays relative colors but a larger difference from freeflow is required for segments to
    #: change the color. This mode only valid when format is png.
    REDUCED_SENSITIVITY = "reduced-sensitivity"

class TrafficIncidentDetailStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Creates traffic lines with colored chevrons indicating severity.
    S1 = "s1"
    #: Creates plain lines with certain degree of glow.
    S2 = "s2"
    #: Creates plain lines with certain degree of glow.
    S3 = "s3"
    #: Night style.
    NIGHT = "night"

class TrafficIncidentTileStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Creates traffic lines with colored chevrons indicating severity.
    S1 = "s1"
    #: Creates plain lines with certain degree of glow.
    S2 = "s2"
    #: Creates plain lines with certain degree of glow.
    S3 = "s3"
    #: Night style.
    NIGHT = "night"

class TransitItineraryDetailType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Shape of an in GeoJSON format. For public transit legs will return also the stops that the leg
    #: passes through. For walk and bike legs, will return also the turn-by-turn navigation data.
    GEOMETRY = "geometry"
    #: Static schedule data as to all departures of Public Transit legs from the current time of the
    #: day to the end of the current day.
    SCHEDULE = "schedule"

class TransitLineDetailType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Return any active service alerts for the specified stop. Response provides brief information
    #: for disruption in service and all basic data associated with the alert.
    ALERTS = "alerts"
    #: Can only be used in conjunction with detailType=alerts.Return additional details associated
    #: with the active service alerts.
    ALERT_DETAILS = "alertDetails"
    #: Return transit lines that stops at the specified stop.
    LINES = "lines"
    #: Return list of stops the line group goes through.
    STOPS = "stops"
    #: Return a 24h static schedule for the specified line group from the current time of the day to
    #: the end of the current day.
    SCHEDULE = "schedule"
    #: Return list of patterns this group is comprised of. A pattern consists of a stop sequence and
    #: shape per line.
    PATTERNS = "patterns"

class TransitRouteType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The best optimal route.
    OPTIMAL = "optimal"
    #: Route with least walk.
    LEAST_WALK = "leastWalk"
    #: Route with least transfers.
    LEAST_TRANSFERS = "leastTransfers"

class TransitStopDetailType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Return any active service alerts for the specified stop. Response provides brief information
    #: for disruption in service and all basic data associated with the alert.
    ALERTS = "alerts"
    #: Can only be used in conjunction with detailType=alerts.Return additional details associated
    #: with the active service alerts.
    ALERT_DETAILS = "alertDetails"
    #: Return transit lines that stops at the specified stop.
    LINES = "lines"
    #: Return line groups that stops at the specified stop.
    LINE_GROUPS = "lineGroups"

class TransitStopQueryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The unique Azure Maps identifier for the respective public transit stop. When referring to
    #: public transit stops over time, it is recommended to use ``stopId`` since it will not change,
    #: as long as the physical stop exists.
    STOP_ID = "stopId"
    #: The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are subject to
    #: change.:code:`<br>` **Note**\ : When this value is used, the metroId parameter is required.
    STOP_KEY = "stopKey"

class TransitType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: bus.
    BUS = "Bus"
    #: cableCar.
    CABLE_CAR = "CableCar"
    #: ferry.
    FERRY = "Ferry"
    #: funicular.
    FUNICULAR = "Funicular"
    #: gondola.
    GONDOLA = "Gondola"
    #: rail.
    RAIL = "Rail"
    #: tram.
    TRAM = "Tram"
    #: subway.
    SUBWAY = "Subway"

class TransitTypeFilter(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: bus.
    BUS = "bus"
    #: cableCar.
    CABLE_CAR = "cableCar"
    #: ferry.
    FERRY = "ferry"
    #: funicular.
    FUNICULAR = "funicular"
    #: gondola.
    GONDOLA = "gondola"
    #: rail.
    RAIL = "rail"
    #: tram.
    TRAM = "tram"
    #: subway.
    SUBWAY = "subway"

class TravelMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The returned routes are optimized for cars.
    CAR = "car"
    #: The returned routes are optimized for commercial vehicles, like for trucks.
    TRUCK = "truck"
    #: The returned routes are optimized for taxis. BETA functionality.
    TAXI = "taxi"
    #: The returned routes are optimized for buses, including the use of bus only lanes. BETA
    #: functionality.
    BUS = "bus"
    #: The returned routes are optimized for vans. BETA functionality.
    VAN = "van"
    #: The returned routes are optimized for motorcycles. BETA functionality.
    MOTORCYCLE = "motorcycle"
    #: The returned routes are optimized for bicycles, including use of bicycle lanes.
    BICYCLE = "bicycle"
    #: The returned routes are optimized for pedestrians, including the use of sidewalks.
    PEDESTRIAN = "pedestrian"

class Type(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The status state of the request.
    """

    #: The request has not started processing yet.
    NOT_STARTED = "NotStarted"
    #: The request has started processing.
    RUNNING = "Running"
    #: The request has one or more failures.
    FAILED = "Failed"
    #: The request has successfully completed.
    SUCCEEDED = "Succeeded"

class Unit(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Return data in metric units. Some example units of metric system are Celsius and kilometer.
    METRIC = "metric"
    #: Return data in imperial units. Some example units of imperial system are Fahrenheit and mile.
    IMPERIAL = "imperial"

class UploadDataFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `GeoJSON <https://tools.ietf.org/html/rfc7946>`_ is a JSON based geospatial data interchange
    #: format.
    GEOJSON = "geojson"
    #: Compressed data format.
    ZIP = "zip"

class VehicleEngineType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Internal combustion engine.
    COMBUSTION = "combustion"
    #: Electric engine.
    ELECTRIC = "electric"

class VehicleLoadType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Explosives.
    US_HAZMAT_CLASS1 = "USHazmatClass1"
    #: Compressed gas.
    US_HAZMAT_CLASS2 = "USHazmatClass2"
    #: Flammable liquids.
    US_HAZMAT_CLASS3 = "USHazmatClass3"
    #: Flammable solids.
    US_HAZMAT_CLASS4 = "USHazmatClass4"
    #: Oxidizers.
    US_HAZMAT_CLASS5 = "USHazmatClass5"
    #: Poisons.
    US_HAZMAT_CLASS6 = "USHazmatClass6"
    #: Radioactive.
    US_HAZMAT_CLASS7 = "USHazmatClass7"
    #: Corrosives.
    US_HAZMAT_CLASS8 = "USHazmatClass8"
    #: Miscellaneous.
    US_HAZMAT_CLASS9 = "USHazmatClass9"
    #: Explosives.
    OTHER_HAZMAT_EXPLOSIVE = "otherHazmatExplosive"
    #: Miscellaneous.
    OTHER_HAZMAT_GENERAL = "otherHazmatGeneral"
    #: Harmful to water.
    OTHER_HAZMAT_HARMFUL_TO_WATER = "otherHazmatHarmfulToWater"

class Windingness(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: low.
    LOW = "low"
    #: normal.
    NORMAL = "normal"
    #: high.
    HIGH = "high"
