# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class AbsoluteDirection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The absolute walking direction associated with this step.
    """

    #: North.
    NORTH = "north"
    #: NorthEast.
    NORTHEAST = "northeast"
    #: East.
    EAST = "east"
    #: SouthEast.
    SOUTHEAST = "southeast"
    #: South.
    SOUTH = "south"
    #: SouthWest.
    SOUTHWEST = "southwest"
    #: West.
    WEST = "west"
    #: NorthWest.
    NORTHWEST = "northwest"

class AgencyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The Id of the transit agency, e.g. '5872'.
    AGENCY_ID = "agencyId"
    #: The agency’s GTFS Id.:code:`<br>` **Note**\ : When this value is used, the metroId parameter is
    #: required.
    AGENCY_KEY = "agencyKey"
    #: The name of the transit agency, e.g. Metro Transit.
    AGENCY_NAME = "agencyName"

class DestinationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The destination of the route as a comma separated string composed by latitude followed by
    #: longitude e.g. "47.641268,-122.125679".
    POSITION = "position"
    #: The unique Azure Maps identifier for the respective public transit stop. When referring to
    #: public transit stops over time, it is recommended to use ``stopId`` since it will not change,
    #: as long as the physical stop exists.
    STOP_ID = "stopId"
    #: The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are subject to
    #: change.:code:`<br>` **Note**\ : When this value is used, the metroId parameter is required.
    STOP_KEY = "stopKey"

class GeographicResourceLocation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Used to access an Azure Maps Creator resource in the United States.
    US = "us"
    #: Used to access an Azure Maps Creator resource in Europe.
    EU = "eu"

class Geography(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us
    and eu.
    """

    US = "us"
    EU = "eu"

class GeoJsonObjectType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types - Point,
    MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and
    FeatureCollection.
    """

    #: ``GeoJSON Point`` geometry.
    GEO_JSON_POINT = "Point"
    #: ``GeoJSON MultiPoint`` geometry.
    GEO_JSON_MULTI_POINT = "MultiPoint"
    #: ``GeoJSON LineString`` geometry.
    GEO_JSON_LINE_STRING = "LineString"
    #: ``GeoJSON MultiLineString`` geometry.
    GEO_JSON_MULTI_LINE_STRING = "MultiLineString"
    #: ``GeoJSON Polygon`` geometry.
    GEO_JSON_POLYGON = "Polygon"
    #: ``GeoJSON MultiPolygon`` geometry.
    GEO_JSON_MULTI_POLYGON = "MultiPolygon"
    #: ``GeoJSON GeometryCollection`` geometry.
    GEO_JSON_GEOMETRY_COLLECTION = "GeometryCollection"
    #: ``GeoJSON Feature`` object.
    GEO_JSON_FEATURE = "Feature"
    #: ``GeoJSON FeatureCollection`` object.
    GEO_JSON_FEATURE_COLLECTION = "FeatureCollection"

class LegType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Pedestrian walk.
    WALK = "Walk"
    #: Bicycle.
    BICYCLE = "Bicycle"
    #: Tram.
    TRAM = "Tram"
    #: Subway.
    SUBWAY = "Subway"
    #: Rail.
    RAIL = "Rail"
    #: Bus.
    BUS = "Bus"
    #: Ferry.
    FERRY = "Ferry"
    #: Cable Car.
    CABLE = "Cable"
    #: Gondola.
    GONDOLA = "Gondola"
    #: Funicular.
    FUNICULAR = "Funicular"
    #: A Leg describing a walk within a compound, e.g. Central Station.
    PATH_WAY_WALK = "PathWayWalk"
    #: A Leg describing a wait for the next public transit leg.
    WAIT = "Wait"
    #: It’s necessary to wait for the next leg on the same vehicle (i.e. the bus will only change its
    #: line number).
    WAIT_ON_VEHICLE = "WaitOnVehicle"

class MetroAreaDetailType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Return a list of all public transit agencies operating in the given metro area.
    AGENCIES = "agencies"
    #: Returns a list of all active service alerts, that are defined in the metro or agency level, and
    #: are not connected to a specific line or stop.
    ALERTS = "alerts"
    #: Applicable only when alerts are requested. Returns details of the alerts.
    ALERT_DETAILS = "alertDetails"
    #: Returns a list of all supported transit types in the given metro area.
    TRANSIT_TYPES = "transitTypes"

class MetroAreaQueryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The origin of the route as a comma separated string composed by latitude followed by longitude
    #: e.g. "47.641268,-122.125679".
    POSITION = "position"
    #: 2-character `ISO 3166-1 <https://www.iso.org/iso-3166-country-codes.html>`_ alpha-2 country
    #: code. E.g. US.
    COUNTRY_CODE = "countryCode"

class ModeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: walk (pedestrian).
    WALK = "walk"
    #: bike.
    BIKE = "bike"
    #: public transit.
    PUBLIC_TRANSIT = "publicTransit"

class OriginType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The origin of the route as a comma separated string composed by latitude followed by longitude
    #: e.g. "47.641268,-122.125679".
    POSITION = "position"
    #: The unique Azure Maps identifier for the respective public transit stop. When referring to
    #: public transit stops over time, it is recommended to use ``stopId`` since it will not change,
    #: as long as the physical stop exists.
    STOP_ID = "stopId"
    #: The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are subject to
    #: change.:code:`<br>` **Note**\ : When this value is used, the metroId parameter is required.
    STOP_KEY = "stopKey"

class RealTimeArrivalsQueryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: One or multiple stops as a comma separated list. Returns the requested number of live arrivals
    #: for all lines arriving at the specified stop. Defined by parameter stopQueryType.
    STOPS = "stops"
    #: Returns the next live arrival times for each stop within the specified line. lineId, for
    #: example, '3785742'.
    LINE = "line"
    #: Returns up to three next Live Arrival times for a given line at a given stop. Comma-separated
    #: list including lineId and stop identifier, for example, 1228526,14014071 (lineId,stopId).
    LINE_AND_STOP = "lineAndStop"
    #: Returns arrivals of a line to stops near the user’s location. The applicable location query
    #: specified as a comma separated string composed by latitude followed by longitude e.g.
    #: "47.641268,-122.125679".
    POSITION = "position"

class RelativeDirection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The relative walking direction associated with applicable step.
    """

    #: Leave.
    DEPART = "depart"
    #: Turn sharp left.
    HARD_LEFT = "hardLeft"
    #: Turn left.
    LEFT = "left"
    #: Turn slightly left.
    SLIGHTLY_LEFT = "slightlyLeft"
    #: Keep going.
    CONTINUE_ENUM = "continue"
    #: Turn slightly right.
    SLIGHTLY_RIGHT = "slightlyRight"
    #: Turn right.
    RIGHT = "right"
    #: Turn sharp right.
    HARD_RIGHT = "hardRight"
    #: Circle clockwise.
    CIRCLE_CLOCKWISE = "circleClockwise"
    #: Circle counter clockwise.
    CIRCLE_COUNTERCLOCKWISE = "circleCounterclockwise"
    #: Take the elevator.
    ELEVATOR = "elevator"
    #: Make a U-turn left.
    UTURN_LEFT = "uturnLeft"
    #: Make a U-turn right.
    UTURN_RIGHT = "uturnRight"

class ResponseFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `The JavaScript Object Notation Data Interchange Format
    #: <https://tools.ietf.org/html/rfc8259>`_.
    JSON = "json"

class ScheduleType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Whether the result is based on real-time or static data.
    """

    #: Returned when estimated time of arrival is based on real-time data.
    SCHEDULED_TIME = "scheduledTime"
    #: Returned when estimated time of arrival is based on static data.
    REAL_TIME = "realTime"

class StopQueryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The unique Azure Maps identifier for the respective public transit stop. When referring to
    #: public transit stops over time, it is recommended to use ``stopId`` since it will not change,
    #: as long as the physical stop exists.
    STOP_ID = "stopId"
    #: The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are subject to
    #: change.:code:`<br>` **Note**\ : When this value is used, the metroId parameter is required.
    STOP_KEY = "stopKey"

class TimeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: arrival at the destination point. Requires that 'time' value must be in the future.
    ARRIVAL = "arrival"
    #: Request departure at the destination point. Requires that 'time' value must be now or in the
    #: future.
    DEPARTURE = "departure"
    #: Request the last lines for the day.
    LAST = "last"

class TransitItineraryDetailType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Shape of an in GeoJSON format. For public transit legs will return also the stops that the leg
    #: passes through. For walk and bike legs, will return also the turn-by-turn navigation data.
    GEOMETRY = "geometry"
    #: Static schedule data as to all departures of Public Transit legs from the current time of the
    #: day to the end of the current day.
    SCHEDULE = "schedule"

class TransitLineDetailType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Return any active service alerts for the specified stop. Response provides brief information
    #: for disruption in service and all basic data associated with the alert.
    ALERTS = "alerts"
    #: Can only be used in conjunction with detailType=alerts.Return additional details associated
    #: with the active service alerts.
    ALERT_DETAILS = "alertDetails"
    #: Return transit lines that stops at the specified stop.
    LINES = "lines"
    #: Return list of stops the line group goes through.
    STOPS = "stops"
    #: Return a 24h static schedule for the specified line group from the current time of the day to
    #: the end of the current day.
    SCHEDULE = "schedule"
    #: Return list of patterns this group is comprised of. A pattern consists of a stop sequence and
    #: shape per line.
    PATTERNS = "patterns"

class TransitRouteType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The best optimal route.
    OPTIMAL = "optimal"
    #: Route with least walk.
    LEAST_WALK = "leastWalk"
    #: Route with least transfers.
    LEAST_TRANSFERS = "leastTransfers"

class TransitStopDetailType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Return any active service alerts for the specified stop. Response provides brief information
    #: for disruption in service and all basic data associated with the alert.
    ALERTS = "alerts"
    #: Can only be used in conjunction with detailType=alerts.Return additional details associated
    #: with the active service alerts.
    ALERT_DETAILS = "alertDetails"
    #: Return transit lines that stops at the specified stop.
    LINES = "lines"
    #: Return line groups that stops at the specified stop.
    LINE_GROUPS = "lineGroups"

class TransitStopQueryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The unique Azure Maps identifier for the respective public transit stop. When referring to
    #: public transit stops over time, it is recommended to use ``stopId`` since it will not change,
    #: as long as the physical stop exists.
    STOP_ID = "stopId"
    #: The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are subject to
    #: change.:code:`<br>` **Note**\ : When this value is used, the metroId parameter is required.
    STOP_KEY = "stopKey"

class TransitType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: bus.
    BUS = "Bus"
    #: cableCar.
    CABLE_CAR = "CableCar"
    #: ferry.
    FERRY = "Ferry"
    #: funicular.
    FUNICULAR = "Funicular"
    #: gondola.
    GONDOLA = "Gondola"
    #: rail.
    RAIL = "Rail"
    #: tram.
    TRAM = "Tram"
    #: subway.
    SUBWAY = "Subway"

class TransitTypeFilter(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: bus.
    BUS = "bus"
    #: cableCar.
    CABLE_CAR = "cableCar"
    #: ferry.
    FERRY = "ferry"
    #: funicular.
    FUNICULAR = "funicular"
    #: gondola.
    GONDOLA = "gondola"
    #: rail.
    RAIL = "rail"
    #: tram.
    TRAM = "tram"
    #: subway.
    SUBWAY = "subway"
