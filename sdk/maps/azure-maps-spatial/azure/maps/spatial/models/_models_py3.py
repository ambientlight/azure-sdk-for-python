# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, List, Optional

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class BufferRequestBody(msrest.serialization.Model):
    """An object with a FeatureCollection and a list of distances.  All the feature's properties should contain ``geometryId``\ , which is used for identifying the geometry and is case-sensitive.

    :param geometries: A valid ``GeoJSON FeatureCollection`` object type. Please refer to `RFC 7946
     <https://tools.ietf.org/html/rfc7946#section-3.3>`_ for details.
    :type geometries: ~azure.maps.spatial.models.GeoJsonFeatureCollection
    :param distances: List of the distances to compute the buffer for, one-to-one per Feature in
     the collection, or one for all Features in the collection.
    :type distances: list[float]
    """

    _attribute_map = {
        'geometries': {'key': 'geometries', 'type': 'GeoJsonFeatureCollection'},
        'distances': {'key': 'distances', 'type': '[float]'},
    }

    def __init__(
        self,
        *,
        geometries: Optional["GeoJsonFeatureCollection"] = None,
        distances: Optional[List[float]] = None,
        **kwargs
    ):
        super(BufferRequestBody, self).__init__(**kwargs)
        self.geometries = geometries
        self.distances = distances


class BufferResponse(msrest.serialization.Model):
    """This object is returned from a successful Spatial Buffer call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar summary: Summary of the call.
    :vartype summary: ~azure.maps.spatial.models.BufferResponseSummary
    :param result: The FeatureCollection of buffers for the input.
    :type result: ~azure.maps.spatial.models.GeoJsonFeatureCollection
    """

    _validation = {
        'summary': {'readonly': True},
    }

    _attribute_map = {
        'summary': {'key': 'summary', 'type': 'BufferResponseSummary'},
        'result': {'key': 'result', 'type': 'GeoJsonFeatureCollection'},
    }

    def __init__(
        self,
        *,
        result: Optional["GeoJsonFeatureCollection"] = None,
        **kwargs
    ):
        super(BufferResponse, self).__init__(**kwargs)
        self.summary = None
        self.result = result


class BufferResponseSummary(msrest.serialization.Model):
    """Summary of the call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar udid: The udid for the user data if one exists.
    :vartype udid: str
    :ivar information: The information about what happened during the call.
    :vartype information: str
    """

    _validation = {
        'udid': {'readonly': True},
        'information': {'readonly': True},
    }

    _attribute_map = {
        'udid': {'key': 'udid', 'type': 'str'},
        'information': {'key': 'information', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BufferResponseSummary, self).__init__(**kwargs)
        self.udid = None
        self.information = None


class ClosestPointResponse(msrest.serialization.Model):
    """This object is returned from a successful Spatial Closest Point call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar summary: Closest Point Summary object.
    :vartype summary: ~azure.maps.spatial.models.ClosestPointSummary
    :param result: Closest Point Result Array.
    :type result: list[~azure.maps.spatial.models.ClosestPointResultEntry]
    """

    _validation = {
        'summary': {'readonly': True},
    }

    _attribute_map = {
        'summary': {'key': 'summary', 'type': 'ClosestPointSummary'},
        'result': {'key': 'result', 'type': '[ClosestPointResultEntry]'},
    }

    def __init__(
        self,
        *,
        result: Optional[List["ClosestPointResultEntry"]] = None,
        **kwargs
    ):
        super(ClosestPointResponse, self).__init__(**kwargs)
        self.summary = None
        self.result = result


class ClosestPointResultEntry(msrest.serialization.Model):
    """Closest Point Result Entry Object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar distance_in_meters: The distance in meters from the source point to the closest point.
    :vartype distance_in_meters: float
    :param position: A location represented as a latitude and longitude.
    :type position: ~azure.maps.spatial.models.SpatialCoordinate
    :ivar geometry_id: The unique id identifies a geometry.
    :vartype geometry_id: str
    """

    _validation = {
        'distance_in_meters': {'readonly': True},
        'geometry_id': {'readonly': True},
    }

    _attribute_map = {
        'distance_in_meters': {'key': 'distanceInMeters', 'type': 'float'},
        'position': {'key': 'position', 'type': 'SpatialCoordinate'},
        'geometry_id': {'key': 'geometryId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        position: Optional["SpatialCoordinate"] = None,
        **kwargs
    ):
        super(ClosestPointResultEntry, self).__init__(**kwargs)
        self.distance_in_meters = None
        self.position = position
        self.geometry_id = None


class ClosestPointSummary(msrest.serialization.Model):
    """Closest Point Summary object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param source_point: A location represented as a latitude and longitude.
    :type source_point: ~azure.maps.spatial.models.SpatialCoordinate
    :ivar udid: A unique data id (udid) for the uploaded content.
    :vartype udid: str
    :ivar information: Processing information.
    :vartype information: str
    """

    _validation = {
        'udid': {'readonly': True},
        'information': {'readonly': True},
    }

    _attribute_map = {
        'source_point': {'key': 'sourcePoint', 'type': 'SpatialCoordinate'},
        'udid': {'key': 'udid', 'type': 'str'},
        'information': {'key': 'information', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        source_point: Optional["SpatialCoordinate"] = None,
        **kwargs
    ):
        super(ClosestPointSummary, self).__init__(**kwargs)
        self.source_point = source_point
        self.udid = None
        self.information = None


class ErrorAdditionalInfo(msrest.serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(msrest.serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.maps.spatial.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.maps.spatial.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(msrest.serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).

    :param error: The error object.
    :type error: ~azure.maps.spatial.models.ErrorDetail
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(
        self,
        *,
        error: Optional["ErrorDetail"] = None,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class GeofenceGeometry(msrest.serialization.Model):
    """The geofencing geometry.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar device_id: ID of the device.
    :vartype device_id: str
    :ivar ud_id: The unique id returned from `Data Upload API
     <https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview>`_ after uploading a valid
     GeoJSON FeatureCollection object. Please refer to  `RFC 7946
     <https://tools.ietf.org/html/rfc7946#section-3.3>`_ for details. All the feature's properties
     should  contain ``geometryId``\ , which is used for identifying the geometry and is
     case-sensitive.
    :vartype ud_id: str
    :ivar geometry_id: The unique id identifies a geometry.
    :vartype geometry_id: str
    :ivar distance: Distance from the coordinate to the closest border of the geofence. Positive
     means the  coordinate is outside of the geofence. If the coordinate is outside of the geofence,
     but more than the value of searchBuffer away from the closest geofence border, then the value
     is 999. Negative means the coordinate is inside of the geofence. If the coordinate is inside
     the polygon, but more than the value of searchBuffer away from the closest geofencing border,
     then the value is -999. A value of 999 means that there is great confidence the coordinate is
     well outside the geofence. A value of -999 means that there is great confidence the coordinate
     is well within the geofence.
    :vartype distance: float
    :ivar nearest_lat: Latitude of the nearest point of the geometry.
    :vartype nearest_lat: float
    :ivar nearest_lon: Longitude of the nearest point of the geometry.
    :vartype nearest_lon: float
    :ivar nearest_z: Sea level in meter of the nearest point on the 2D extrusion geometry. This
     will only be presented in response when value is provided for 'zInMeter' in the request.
    :vartype nearest_z: float
    """

    _validation = {
        'device_id': {'readonly': True},
        'ud_id': {'readonly': True},
        'geometry_id': {'readonly': True},
        'distance': {'readonly': True},
        'nearest_lat': {'readonly': True},
        'nearest_lon': {'readonly': True},
        'nearest_z': {'readonly': True},
    }

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'ud_id': {'key': 'udId', 'type': 'str'},
        'geometry_id': {'key': 'geometryId', 'type': 'str'},
        'distance': {'key': 'distance', 'type': 'float'},
        'nearest_lat': {'key': 'nearestLat', 'type': 'float'},
        'nearest_lon': {'key': 'nearestLon', 'type': 'float'},
        'nearest_z': {'key': 'nearestZ', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GeofenceGeometry, self).__init__(**kwargs)
        self.device_id = None
        self.ud_id = None
        self.geometry_id = None
        self.distance = None
        self.nearest_lat = None
        self.nearest_lon = None
        self.nearest_z = None


class GeofenceResponse(msrest.serialization.Model):
    """This object is returned from a geofence proximity call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar geometries: Lists the fence geometries that contain the coordinate position or overlap
     the searchBuffer around the position.
    :vartype geometries: list[~azure.maps.spatial.models.GeofenceGeometry]
    :ivar expired_geofence_geometry_id: Lists of the geometry ID of the geofence which is expired
     relative to the user time in the request.
    :vartype expired_geofence_geometry_id: list[str]
    :ivar invalid_period_geofence_geometry_id: Lists of the geometry ID of the geofence which is in
     invalid period relative to the user time in the request.
    :vartype invalid_period_geofence_geometry_id: list[str]
    :ivar is_event_published: True if at least one event is published to the Azure Maps event
     subscriber, false if no event is published to the Azure Maps event subscriber. This will only
     be presented in response when 'isAsync' query parameter is set to true.
    :vartype is_event_published: bool
    """

    _validation = {
        'geometries': {'readonly': True},
        'expired_geofence_geometry_id': {'readonly': True},
        'invalid_period_geofence_geometry_id': {'readonly': True},
        'is_event_published': {'readonly': True},
    }

    _attribute_map = {
        'geometries': {'key': 'geometries', 'type': '[GeofenceGeometry]'},
        'expired_geofence_geometry_id': {'key': 'expiredGeofenceGeometryId', 'type': '[str]'},
        'invalid_period_geofence_geometry_id': {'key': 'invalidPeriodGeofenceGeometryId', 'type': '[str]'},
        'is_event_published': {'key': 'isEventPublished', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GeofenceResponse, self).__init__(**kwargs)
        self.geometries = None
        self.expired_geofence_geometry_id = None
        self.invalid_period_geofence_geometry_id = None
        self.is_event_published = None


class GeoJsonFeatureData(msrest.serialization.Model):
    """GeoJsonFeatureData.

    All required parameters must be populated in order to send to Azure.

    :param geometry: Required. A valid ``GeoJSON`` geometry object. The type must be one of the
     seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon,
     MultiPolygon and GeometryCollection. Please refer to `RFC 7946
     <https://tools.ietf.org/html/rfc7946#section-3.1>`_ for details.
    :type geometry: ~azure.maps.spatial.models.GeoJsonGeometry
    :param properties: Properties can contain any additional metadata about the ``Feature``. Value
     can be any JSON object or a JSON null value.
    :type properties: any
    :param id: Identifier for the feature.
    :type id: str
    :param feature_type: The type of the feature. The value depends on the data model the current
     feature is part of. Some data models may have an empty value.
    :type feature_type: str
    """

    _validation = {
        'geometry': {'required': True},
    }

    _attribute_map = {
        'geometry': {'key': 'geometry', 'type': 'GeoJsonGeometry'},
        'properties': {'key': 'properties', 'type': 'object'},
        'id': {'key': 'id', 'type': 'str'},
        'feature_type': {'key': 'featureType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        geometry: "GeoJsonGeometry",
        properties: Optional[Any] = None,
        id: Optional[str] = None,
        feature_type: Optional[str] = None,
        **kwargs
    ):
        super(GeoJsonFeatureData, self).__init__(**kwargs)
        self.geometry = geometry
        self.properties = properties
        self.id = id
        self.feature_type = feature_type


class GeoJsonObject(msrest.serialization.Model):
    """A valid ``GeoJSON`` object. Please refer to `RFC 7946 <https://tools.ietf.org/html/rfc7946#section-3>`_ for details.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: GeoJsonFeature, GeoJsonFeatureCollection, GeoJsonGeometry.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON
     object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon,
     GeometryCollection, Feature and FeatureCollection.Constant filled by server.  Possible values
     include: "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon",
     "GeometryCollection", "Feature", "FeatureCollection".
    :type type: str or ~azure.maps.spatial.models.GeoJsonObjectType
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Feature': 'GeoJsonFeature', 'FeatureCollection': 'GeoJsonFeatureCollection', 'GeoJsonGeometry': 'GeoJsonGeometry'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GeoJsonObject, self).__init__(**kwargs)
        self.type = None  # type: Optional[str]


class GeoJsonFeature(GeoJsonObject, GeoJsonFeatureData):
    """A valid ``GeoJSON Feature`` object type. Please refer to `RFC 7946 <https://tools.ietf.org/html/rfc7946#section-3.2>`_ for details.

    All required parameters must be populated in order to send to Azure.

    :param geometry: Required. A valid ``GeoJSON`` geometry object. The type must be one of the
     seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon,
     MultiPolygon and GeometryCollection. Please refer to `RFC 7946
     <https://tools.ietf.org/html/rfc7946#section-3.1>`_ for details.
    :type geometry: ~azure.maps.spatial.models.GeoJsonGeometry
    :param properties: Properties can contain any additional metadata about the ``Feature``. Value
     can be any JSON object or a JSON null value.
    :type properties: any
    :param id: Identifier for the feature.
    :type id: str
    :param feature_type: The type of the feature. The value depends on the data model the current
     feature is part of. Some data models may have an empty value.
    :type feature_type: str
    :param type: Required. Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON
     object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon,
     GeometryCollection, Feature and FeatureCollection.Constant filled by server.  Possible values
     include: "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon",
     "GeometryCollection", "Feature", "FeatureCollection".
    :type type: str or ~azure.maps.spatial.models.GeoJsonObjectType
    """

    _validation = {
        'geometry': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'geometry': {'key': 'geometry', 'type': 'GeoJsonGeometry'},
        'properties': {'key': 'properties', 'type': 'object'},
        'id': {'key': 'id', 'type': 'str'},
        'feature_type': {'key': 'featureType', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        geometry: "GeoJsonGeometry",
        properties: Optional[Any] = None,
        id: Optional[str] = None,
        feature_type: Optional[str] = None,
        **kwargs
    ):
        super(GeoJsonFeature, self).__init__(geometry=geometry, properties=properties, id=id, feature_type=feature_type, **kwargs)
        self.geometry = geometry
        self.properties = properties
        self.id = id
        self.feature_type = feature_type
        self.type = 'Feature'  # type: str
        self.type = 'Feature'  # type: str


class GeoJsonFeatureCollectionData(msrest.serialization.Model):
    """GeoJsonFeatureCollectionData.

    All required parameters must be populated in order to send to Azure.

    :param features: Required. Contains a list of valid ``GeoJSON Feature`` objects.
    :type features: list[~azure.maps.spatial.models.GeoJsonFeature]
    """

    _validation = {
        'features': {'required': True},
    }

    _attribute_map = {
        'features': {'key': 'features', 'type': '[GeoJsonFeature]'},
    }

    def __init__(
        self,
        *,
        features: List["GeoJsonFeature"],
        **kwargs
    ):
        super(GeoJsonFeatureCollectionData, self).__init__(**kwargs)
        self.features = features


class GeoJsonFeatureCollection(GeoJsonObject, GeoJsonFeatureCollectionData):
    """A valid ``GeoJSON FeatureCollection`` object type. Please refer to `RFC 7946 <https://tools.ietf.org/html/rfc7946#section-3.3>`_ for details.

    All required parameters must be populated in order to send to Azure.

    :param features: Required. Contains a list of valid ``GeoJSON Feature`` objects.
    :type features: list[~azure.maps.spatial.models.GeoJsonFeature]
    :param type: Required. Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON
     object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon,
     GeometryCollection, Feature and FeatureCollection.Constant filled by server.  Possible values
     include: "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon",
     "GeometryCollection", "Feature", "FeatureCollection".
    :type type: str or ~azure.maps.spatial.models.GeoJsonObjectType
    """

    _validation = {
        'features': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'features': {'key': 'features', 'type': '[GeoJsonFeature]'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        features: List["GeoJsonFeature"],
        **kwargs
    ):
        super(GeoJsonFeatureCollection, self).__init__(features=features, **kwargs)
        self.features = features
        self.type = 'FeatureCollection'  # type: str
        self.type = 'FeatureCollection'  # type: str


class GeoJsonGeometry(GeoJsonObject):
    """A valid ``GeoJSON`` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to `RFC 7946 <https://tools.ietf.org/html/rfc7946#section-3.1>`_ for details.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: GeoJsonGeometryCollection, GeoJsonLineString, GeoJsonMultiLineString, GeoJsonMultiPoint, GeoJsonMultiPolygon, GeoJsonPoint, GeoJsonPolygon.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON
     object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon,
     GeometryCollection, Feature and FeatureCollection.Constant filled by server.  Possible values
     include: "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon",
     "GeometryCollection", "Feature", "FeatureCollection".
    :type type: str or ~azure.maps.spatial.models.GeoJsonObjectType
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'GeometryCollection': 'GeoJsonGeometryCollection', 'LineString': 'GeoJsonLineString', 'MultiLineString': 'GeoJsonMultiLineString', 'MultiPoint': 'GeoJsonMultiPoint', 'MultiPolygon': 'GeoJsonMultiPolygon', 'Point': 'GeoJsonPoint', 'Polygon': 'GeoJsonPolygon'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GeoJsonGeometry, self).__init__(**kwargs)
        self.type = 'GeoJsonGeometry'  # type: str


class GeoJsonGeometryCollectionData(msrest.serialization.Model):
    """GeoJsonGeometryCollectionData.

    All required parameters must be populated in order to send to Azure.

    :param geometries: Required. Contains a list of valid ``GeoJSON`` geometry objects. **Note**
     that coordinates in GeoJSON are in x, y order (longitude, latitude).
    :type geometries: list[~azure.maps.spatial.models.GeoJsonGeometry]
    """

    _validation = {
        'geometries': {'required': True},
    }

    _attribute_map = {
        'geometries': {'key': 'geometries', 'type': '[GeoJsonGeometry]'},
    }

    def __init__(
        self,
        *,
        geometries: List["GeoJsonGeometry"],
        **kwargs
    ):
        super(GeoJsonGeometryCollectionData, self).__init__(**kwargs)
        self.geometries = geometries


class GeoJsonGeometryCollection(GeoJsonGeometry, GeoJsonGeometryCollectionData):
    """A valid ``GeoJSON GeometryCollection`` object type. Please refer to `RFC 7946 <https://tools.ietf.org/html/rfc7946#section-3.1.8>`_ for details.

    All required parameters must be populated in order to send to Azure.

    :param geometries: Required. Contains a list of valid ``GeoJSON`` geometry objects. **Note**
     that coordinates in GeoJSON are in x, y order (longitude, latitude).
    :type geometries: list[~azure.maps.spatial.models.GeoJsonGeometry]
    :param type: Required. Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON
     object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon,
     GeometryCollection, Feature and FeatureCollection.Constant filled by server.  Possible values
     include: "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon",
     "GeometryCollection", "Feature", "FeatureCollection".
    :type type: str or ~azure.maps.spatial.models.GeoJsonObjectType
    """

    _validation = {
        'geometries': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'geometries': {'key': 'geometries', 'type': '[GeoJsonGeometry]'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        geometries: List["GeoJsonGeometry"],
        **kwargs
    ):
        super(GeoJsonGeometryCollection, self).__init__(geometries=geometries, **kwargs)
        self.geometries = geometries
        self.type = 'GeometryCollection'  # type: str
        self.type = 'GeometryCollection'  # type: str


class GeoJsonLineStringData(msrest.serialization.Model):
    """GeoJsonLineStringData.

    All required parameters must be populated in order to send to Azure.

    :param coordinates: Required. Coordinates for the ``GeoJson LineString`` geometry.
    :type coordinates: list[list[float]]
    """

    _validation = {
        'coordinates': {'required': True},
    }

    _attribute_map = {
        'coordinates': {'key': 'coordinates', 'type': '[[float]]'},
    }

    def __init__(
        self,
        *,
        coordinates: List[List[float]],
        **kwargs
    ):
        super(GeoJsonLineStringData, self).__init__(**kwargs)
        self.coordinates = coordinates


class GeoJsonLineString(GeoJsonGeometry, GeoJsonLineStringData):
    """A valid ``GeoJSON LineString`` geometry type. Please refer to `RFC 7946 <https://tools.ietf.org/html/rfc7946#section-3.1.4>`_ for details.

    All required parameters must be populated in order to send to Azure.

    :param coordinates: Required. Coordinates for the ``GeoJson LineString`` geometry.
    :type coordinates: list[list[float]]
    :param type: Required. Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON
     object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon,
     GeometryCollection, Feature and FeatureCollection.Constant filled by server.  Possible values
     include: "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon",
     "GeometryCollection", "Feature", "FeatureCollection".
    :type type: str or ~azure.maps.spatial.models.GeoJsonObjectType
    """

    _validation = {
        'coordinates': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'coordinates': {'key': 'coordinates', 'type': '[[float]]'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        coordinates: List[List[float]],
        **kwargs
    ):
        super(GeoJsonLineString, self).__init__(coordinates=coordinates, **kwargs)
        self.coordinates = coordinates
        self.type = 'LineString'  # type: str
        self.type = 'LineString'  # type: str


class GeoJsonMultiLineStringData(msrest.serialization.Model):
    """GeoJsonMultiLineStringData.

    All required parameters must be populated in order to send to Azure.

    :param coordinates: Required. Coordinates for the ``GeoJson MultiLineString`` geometry.
    :type coordinates: list[list[list[float]]]
    """

    _validation = {
        'coordinates': {'required': True},
    }

    _attribute_map = {
        'coordinates': {'key': 'coordinates', 'type': '[[[float]]]'},
    }

    def __init__(
        self,
        *,
        coordinates: List[List[List[float]]],
        **kwargs
    ):
        super(GeoJsonMultiLineStringData, self).__init__(**kwargs)
        self.coordinates = coordinates


class GeoJsonMultiLineString(GeoJsonGeometry, GeoJsonMultiLineStringData):
    """A valid ``GeoJSON MultiLineString`` geometry type. Please refer to `RFC 7946 <https://tools.ietf.org/html/rfc7946#section-3.1.5>`_ for details.

    All required parameters must be populated in order to send to Azure.

    :param coordinates: Required. Coordinates for the ``GeoJson MultiLineString`` geometry.
    :type coordinates: list[list[list[float]]]
    :param type: Required. Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON
     object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon,
     GeometryCollection, Feature and FeatureCollection.Constant filled by server.  Possible values
     include: "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon",
     "GeometryCollection", "Feature", "FeatureCollection".
    :type type: str or ~azure.maps.spatial.models.GeoJsonObjectType
    """

    _validation = {
        'coordinates': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'coordinates': {'key': 'coordinates', 'type': '[[[float]]]'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        coordinates: List[List[List[float]]],
        **kwargs
    ):
        super(GeoJsonMultiLineString, self).__init__(coordinates=coordinates, **kwargs)
        self.coordinates = coordinates
        self.type = 'MultiLineString'  # type: str
        self.type = 'MultiLineString'  # type: str


class GeoJsonMultiPointData(msrest.serialization.Model):
    """Data contained by a ``GeoJson MultiPoint``.

    All required parameters must be populated in order to send to Azure.

    :param coordinates: Required. Coordinates for the ``GeoJson MultiPoint`` geometry.
    :type coordinates: list[list[float]]
    """

    _validation = {
        'coordinates': {'required': True},
    }

    _attribute_map = {
        'coordinates': {'key': 'coordinates', 'type': '[[float]]'},
    }

    def __init__(
        self,
        *,
        coordinates: List[List[float]],
        **kwargs
    ):
        super(GeoJsonMultiPointData, self).__init__(**kwargs)
        self.coordinates = coordinates


class GeoJsonMultiPoint(GeoJsonGeometry, GeoJsonMultiPointData):
    """A valid ``GeoJSON MultiPoint`` geometry type. Please refer to `RFC 7946 <https://tools.ietf.org/html/rfc7946#section-3.1.3>`_ for details.

    All required parameters must be populated in order to send to Azure.

    :param coordinates: Required. Coordinates for the ``GeoJson MultiPoint`` geometry.
    :type coordinates: list[list[float]]
    :param type: Required. Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON
     object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon,
     GeometryCollection, Feature and FeatureCollection.Constant filled by server.  Possible values
     include: "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon",
     "GeometryCollection", "Feature", "FeatureCollection".
    :type type: str or ~azure.maps.spatial.models.GeoJsonObjectType
    """

    _validation = {
        'coordinates': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'coordinates': {'key': 'coordinates', 'type': '[[float]]'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        coordinates: List[List[float]],
        **kwargs
    ):
        super(GeoJsonMultiPoint, self).__init__(coordinates=coordinates, **kwargs)
        self.coordinates = coordinates
        self.type = 'MultiPoint'  # type: str
        self.type = 'MultiPoint'  # type: str


class GeoJsonMultiPolygonData(msrest.serialization.Model):
    """GeoJsonMultiPolygonData.

    All required parameters must be populated in order to send to Azure.

    :param coordinates: Required. Contains a list of valid ``GeoJSON Polygon`` objects. **Note**
     that coordinates in GeoJSON are in x, y order (longitude, latitude).
    :type coordinates: list[list[list[list[float]]]]
    """

    _validation = {
        'coordinates': {'required': True},
    }

    _attribute_map = {
        'coordinates': {'key': 'coordinates', 'type': '[[[[float]]]]'},
    }

    def __init__(
        self,
        *,
        coordinates: List[List[List[List[float]]]],
        **kwargs
    ):
        super(GeoJsonMultiPolygonData, self).__init__(**kwargs)
        self.coordinates = coordinates


class GeoJsonMultiPolygon(GeoJsonGeometry, GeoJsonMultiPolygonData):
    """A valid ``GeoJSON MultiPolygon`` object type. Please refer to `RFC 7946 <https://tools.ietf.org/html/rfc7946#section-3.1.7>`_ for details.

    All required parameters must be populated in order to send to Azure.

    :param coordinates: Required. Contains a list of valid ``GeoJSON Polygon`` objects. **Note**
     that coordinates in GeoJSON are in x, y order (longitude, latitude).
    :type coordinates: list[list[list[list[float]]]]
    :param type: Required. Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON
     object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon,
     GeometryCollection, Feature and FeatureCollection.Constant filled by server.  Possible values
     include: "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon",
     "GeometryCollection", "Feature", "FeatureCollection".
    :type type: str or ~azure.maps.spatial.models.GeoJsonObjectType
    """

    _validation = {
        'coordinates': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'coordinates': {'key': 'coordinates', 'type': '[[[[float]]]]'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        coordinates: List[List[List[List[float]]]],
        **kwargs
    ):
        super(GeoJsonMultiPolygon, self).__init__(coordinates=coordinates, **kwargs)
        self.coordinates = coordinates
        self.type = 'MultiPolygon'  # type: str
        self.type = 'MultiPolygon'  # type: str


class GeoJsonPointData(msrest.serialization.Model):
    """Data contained by a ``GeoJson Point``.

    All required parameters must be populated in order to send to Azure.

    :param coordinates: Required. A ``Position`` is an array of numbers with two or more elements.
     The first two elements are *longitude* and *latitude*\ , precisely in that order.
     *Altitude/Elevation* is an optional third element. Please refer to `RFC 7946
     <https://tools.ietf.org/html/rfc7946#section-3.1.1>`_ for details.
    :type coordinates: list[float]
    """

    _validation = {
        'coordinates': {'required': True},
    }

    _attribute_map = {
        'coordinates': {'key': 'coordinates', 'type': '[float]'},
    }

    def __init__(
        self,
        *,
        coordinates: List[float],
        **kwargs
    ):
        super(GeoJsonPointData, self).__init__(**kwargs)
        self.coordinates = coordinates


class GeoJsonPoint(GeoJsonGeometry, GeoJsonPointData):
    """A valid ``GeoJSON Point`` geometry type. Please refer to `RFC 7946 <https://tools.ietf.org/html/rfc7946#section-3.1.2>`_ for details.

    All required parameters must be populated in order to send to Azure.

    :param coordinates: Required. A ``Position`` is an array of numbers with two or more elements.
     The first two elements are *longitude* and *latitude*\ , precisely in that order.
     *Altitude/Elevation* is an optional third element. Please refer to `RFC 7946
     <https://tools.ietf.org/html/rfc7946#section-3.1.1>`_ for details.
    :type coordinates: list[float]
    :param type: Required. Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON
     object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon,
     GeometryCollection, Feature and FeatureCollection.Constant filled by server.  Possible values
     include: "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon",
     "GeometryCollection", "Feature", "FeatureCollection".
    :type type: str or ~azure.maps.spatial.models.GeoJsonObjectType
    """

    _validation = {
        'coordinates': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'coordinates': {'key': 'coordinates', 'type': '[float]'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        coordinates: List[float],
        **kwargs
    ):
        super(GeoJsonPoint, self).__init__(coordinates=coordinates, **kwargs)
        self.coordinates = coordinates
        self.type = 'Point'  # type: str
        self.type = 'Point'  # type: str


class GeoJsonPolygonData(msrest.serialization.Model):
    """GeoJsonPolygonData.

    All required parameters must be populated in order to send to Azure.

    :param coordinates: Required. Coordinates for the ``GeoJson Polygon`` geometry type.
    :type coordinates: list[list[list[float]]]
    """

    _validation = {
        'coordinates': {'required': True},
    }

    _attribute_map = {
        'coordinates': {'key': 'coordinates', 'type': '[[[float]]]'},
    }

    def __init__(
        self,
        *,
        coordinates: List[List[List[float]]],
        **kwargs
    ):
        super(GeoJsonPolygonData, self).__init__(**kwargs)
        self.coordinates = coordinates


class GeoJsonPolygon(GeoJsonGeometry, GeoJsonPolygonData):
    """A valid ``GeoJSON Polygon`` geometry type. Please refer to `RFC 7946 <https://tools.ietf.org/html/rfc7946#section-3.1.6>`_ for details.

    All required parameters must be populated in order to send to Azure.

    :param coordinates: Required. Coordinates for the ``GeoJson Polygon`` geometry type.
    :type coordinates: list[list[list[float]]]
    :param type: Required. Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON
     object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon,
     GeometryCollection, Feature and FeatureCollection.Constant filled by server.  Possible values
     include: "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon",
     "GeometryCollection", "Feature", "FeatureCollection".
    :type type: str or ~azure.maps.spatial.models.GeoJsonObjectType
    """

    _validation = {
        'coordinates': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'coordinates': {'key': 'coordinates', 'type': '[[[float]]]'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        coordinates: List[List[List[float]]],
        **kwargs
    ):
        super(GeoJsonPolygon, self).__init__(coordinates=coordinates, **kwargs)
        self.coordinates = coordinates
        self.type = 'Polygon'  # type: str
        self.type = 'Polygon'  # type: str


class GreatCircleDistanceResponse(msrest.serialization.Model):
    """This object is returned from a successful Great Circle Distance call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar summary: Summary object.
    :vartype summary: ~azure.maps.spatial.models.GreatCircleDistanceResponseSummary
    :ivar result: Result Object.
    :vartype result: ~azure.maps.spatial.models.GreatCircleDistanceResponseResult
    """

    _validation = {
        'summary': {'readonly': True},
        'result': {'readonly': True},
    }

    _attribute_map = {
        'summary': {'key': 'summary', 'type': 'GreatCircleDistanceResponseSummary'},
        'result': {'key': 'result', 'type': 'GreatCircleDistanceResponseResult'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GreatCircleDistanceResponse, self).__init__(**kwargs)
        self.summary = None
        self.result = None


class GreatCircleDistanceResponseResult(msrest.serialization.Model):
    """Result Object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar distance_in_meters: The great circle distance in meters from the source point to the
     target point.
    :vartype distance_in_meters: float
    """

    _validation = {
        'distance_in_meters': {'readonly': True},
    }

    _attribute_map = {
        'distance_in_meters': {'key': 'distanceInMeters', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GreatCircleDistanceResponseResult, self).__init__(**kwargs)
        self.distance_in_meters = None


class GreatCircleDistanceResponseSummary(msrest.serialization.Model):
    """Summary object.

    :param source_point: A location represented as a latitude and longitude.
    :type source_point: ~azure.maps.spatial.models.SpatialCoordinate
    :param target_point: A location represented as a latitude and longitude.
    :type target_point: ~azure.maps.spatial.models.SpatialCoordinate
    """

    _attribute_map = {
        'source_point': {'key': 'sourcePoint', 'type': 'SpatialCoordinate'},
        'target_point': {'key': 'targetPoint', 'type': 'SpatialCoordinate'},
    }

    def __init__(
        self,
        *,
        source_point: Optional["SpatialCoordinate"] = None,
        target_point: Optional["SpatialCoordinate"] = None,
        **kwargs
    ):
        super(GreatCircleDistanceResponseSummary, self).__init__(**kwargs)
        self.source_point = source_point
        self.target_point = target_point


class PointInPolygonResponse(msrest.serialization.Model):
    """Returns true if point is within the polygon, false otherwise.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar summary: Point In Polygon Summary object.
    :vartype summary: ~azure.maps.spatial.models.PointInPolygonSummary
    :param result: Point In Polygon Result Object.
    :type result: ~azure.maps.spatial.models.PointInPolygonResult
    """

    _validation = {
        'summary': {'readonly': True},
    }

    _attribute_map = {
        'summary': {'key': 'summary', 'type': 'PointInPolygonSummary'},
        'result': {'key': 'result', 'type': 'PointInPolygonResult'},
    }

    def __init__(
        self,
        *,
        result: Optional["PointInPolygonResult"] = None,
        **kwargs
    ):
        super(PointInPolygonResponse, self).__init__(**kwargs)
        self.summary = None
        self.result = result


class PointInPolygonResult(msrest.serialization.Model):
    """Point In Polygon Result Object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar point_in_polygons: Point In Polygons Property.
    :vartype point_in_polygons: bool
    :ivar intersecting_geometries: Geometries array.
    :vartype intersecting_geometries: list[str]
    """

    _validation = {
        'point_in_polygons': {'readonly': True},
        'intersecting_geometries': {'readonly': True},
    }

    _attribute_map = {
        'point_in_polygons': {'key': 'pointInPolygons', 'type': 'bool'},
        'intersecting_geometries': {'key': 'intersectingGeometries', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PointInPolygonResult, self).__init__(**kwargs)
        self.point_in_polygons = None
        self.intersecting_geometries = None


class PointInPolygonSummary(msrest.serialization.Model):
    """Point In Polygon Summary object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param source_point: A location represented as a latitude and longitude.
    :type source_point: ~azure.maps.spatial.models.SpatialCoordinate
    :ivar udid: A unique data id (udid) for the uploaded content. Udid is not applicable for POST
     spatial operations(set to null).
    :vartype udid: str
    :ivar information: Processing information.
    :vartype information: str
    """

    _validation = {
        'udid': {'readonly': True},
        'information': {'readonly': True},
    }

    _attribute_map = {
        'source_point': {'key': 'sourcePoint', 'type': 'SpatialCoordinate'},
        'udid': {'key': 'udid', 'type': 'str'},
        'information': {'key': 'information', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        source_point: Optional["SpatialCoordinate"] = None,
        **kwargs
    ):
        super(PointInPolygonSummary, self).__init__(**kwargs)
        self.source_point = source_point
        self.udid = None
        self.information = None


class SpatialCoordinate(msrest.serialization.Model):
    """A location represented as a latitude and longitude.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar lat: Latitude property.
    :vartype lat: float
    :ivar lon: Longitude property.
    :vartype lon: float
    """

    _validation = {
        'lat': {'readonly': True},
        'lon': {'readonly': True},
    }

    _attribute_map = {
        'lat': {'key': 'lat', 'type': 'float'},
        'lon': {'key': 'lon', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SpatialCoordinate, self).__init__(**kwargs)
        self.lat = None
        self.lon = None
